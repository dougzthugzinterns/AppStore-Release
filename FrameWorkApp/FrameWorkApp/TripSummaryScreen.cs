// This file has been autogenerated from parsing an Objective-C header file added in Xcode.
using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.Foundation;
using System.Collections.Generic;
using MonoTouch.CoreLocation;
using MonoTouch.Social;
using MonoTouch.AudioToolbox;

namespace FrameWorkApp
{
	public partial class TripSummaryScreen : UIViewController
	{

		SDMFileManager fileManager = new SDMFileManager();
		RawGPS rawGPS = new RawGPS();
		private static Event[] importedGpsEvents;
		private static List<String> importedPaths;
		double totalDistance;
		int pointChange=0;
		private int numberOfStops = 0;
		private int numberOfStarts = 0;
		private int numberOfTurns = 0;
		private SystemSound sound;
		private User currentUser;

		//Constants for Event Types
		const int UNKNOWN_EVENT_TYPE= 0;
		const int HARD_BRAKE_TYPE= 1;
		const int HARD_ACCEL_TYPE = 2;
		const int HARD_TURN_TYPE = 3;

		//Constants for Amazon Web Services
		const string ACCESSID = "AKIAJZAYKXMCJPGUESMA";
		const string PRIVATEKEY = "0mad7Rwe6/zkXGa2sOILB3gEMcfEZvpQIalORBRz";
		const string HOST = "https://dynamodb.us-west-2.amazonaws.com";
		const string REGION="us-west-2";

		private const double MINIMUM_DISTANCE_REQUIRED = 1;

		public TripSummaryScreen (IntPtr handle) : base (handle)
		{

		}

		public override UIInterfaceOrientationMask GetSupportedInterfaceOrientations ()
		{
			return UIInterfaceOrientationMask.Portrait;
		}

		public override void ViewWillAppear (bool animated)
		{
			base.ViewWillAppear (animated);
			UIApplication.SharedApplication.IdleTimerDisabled = false;

				
			if(MainViewController.hasJustUnlockedAchievement){
				this.badgeNotification.SetImage (UIImage.FromFile ("BadgesNotifications.png"),UIControlState.Normal);
			}
			else {
				this.badgeNotification.SetImage(UIImage.FromFile("BadgesOff.png"), UIControlState.Normal);
			}

		}
		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			currentUser = fileManager.readUserFile ();
			totalDistance = rawGPS.convertMetersToKilometers(rawGPS.CalculateDistanceTraveled(new List<CLLocation>(fileManager.readDataFromTripDistanceFile())));

			//Get Events and Paths from File
			importedGpsEvents=fileManager.readDataFromTripEventFile ();
			importedPaths = fileManager.readGooglePathFile ();

			foreach (var e in importedGpsEvents) {
				if (e.Type== HARD_ACCEL_TYPE) {
					numberOfStarts++;
				}
				else if (e.Type == HARD_BRAKE_TYPE) {
					numberOfStops++;
				}
				else if (e.Type == HARD_TURN_TYPE) {
					numberOfTurns++;
				}
			}

			//Add Trip to Trip Log
			if (totalDistance > MINIMUM_DISTANCE_REQUIRED) {
				fileManager.addDataToTripLogFile (new Trip(DateTime.Now, numberOfStarts, numberOfStops, numberOfTurns,totalDistance));
				AmazonWebServices amazon = new AmazonWebServices (HOST, REGION, ACCESSID, PRIVATEKEY);
				if (currentUser.Id == "-1") {
					//Generate Unique ID
					string id = "";
					do {
						Random random = new Random ();
						id = random.Next ().ToString ("X8") + random.Next ().ToString ("X8");
					} while(amazon.checkIdExists(id));

					currentUser.Id=id;
				}	
				//Update Achievements Data
				AchievementsCalculator calculationAfterCurrentTrip = new AchievementsCalculator(numberOfStarts, numberOfStops, numberOfTurns, totalDistance);
				//AchievementsCalculator calculationAfterCurrentTrip = new AchievementsCalculator (0, 0, 0, 1000);

				calculationAfterCurrentTrip.recalculateAchievements ();
				MainViewController.hasJustUnlockedAchievement = calculationAfterCurrentTrip.getAchievementHasBeenUnlocked;
				
				//Send Trip Data to Amazon
				amazon.sendTripData((int)totalDistance, numberOfStops, numberOfStarts, numberOfTurns, currentUser.Id);

			}
			//Clear Current Trip
			fileManager.clearCurrentTripEventFile();
			fileManager.clearCurrentTripDistanceFile();
			fileManager.clearGooglePathFile();

			//Update User Data
			currentUser.updateData (totalDistance, numberOfStops, numberOfStarts, numberOfTurns);
			pointChange = currentUser.getCurrentTripPoints (totalDistance, numberOfStops, numberOfStarts, numberOfTurns);

			fileManager.updateUserFile (currentUser);

			//Updates tripSummaryEventLabel displaying events from this trip
			hardBrakesLabel.Text = numberOfStops.ToString ();
			numHardStartLabel.Text = numberOfStarts.ToString ();
			hardTurnLabel.Text = numberOfTurns.ToString ();
			pointsEarnedLabel.Text = pointChange.ToString () + "/" + currentUser.getPointsPossibleForTrip(totalDistance).ToString();
			distanceLabel.Text = totalDistance.ToString ("0.0");

			if (currentUser.Rank.ToString().Equals("Beginner")) {
				this.rankView.Image = UIImage.FromFile ("ACHIEVEMENTS-23.png");
			}

			else if (currentUser.Rank.ToString().Equals("Rookie")) {
				this.rankView.Image = UIImage.FromFile ("ACHIEVEMENTS-24.png");
			}

			else if (currentUser.Rank.ToString().Equals("Pro")) {
				this.rankView.Image = UIImage.FromFile ("ACHIVEMENTS-20.png");
			}

			else if (currentUser.Rank.ToString().Equals("All-Star")) {
				this.rankView.Image = UIImage.FromFile ("ACHIEVEMENTS-21.png");
			}

			else if (currentUser.Rank.ToString().Equals("Veteran")) {
				this.rankView.Image = UIImage.FromFile ("ACHIEVEMENTS-22.png");
			}


			//Facebook Button
			shareButton.TouchUpInside += (sender, e) => {
				SLComposeViewController slComposer;
				if (SLComposeViewController.IsAvailable (SLServiceKind.Facebook)) {
					//Native Posting Only
					slComposer = SLComposeViewController.FromService (SLServiceType.Facebook);
					slComposer.SetInitialText ("I just took a trip with Safe Driving Mate! Here are my results: "
					                           +"\nTotal Points: "+pointChange.ToString ()
					                           +"\nTotal Hard Stops: "+numberOfStops
					                           +"\nTotal Hard Starts:"+numberOfStarts
					                           +"\nTotal Hard Turns:"+numberOfTurns);
					//slComposer.AddUrl (new NSUrl("http://google.com"));
					slComposer.CompletionHandler += (result) => {
						InvokeOnMainThread (() => {
							//DismissViewController (true, null);

						});
					};

					PresentViewController (slComposer, true, null);
				}

			};
		}

		partial void toInfo (NSObject sender)
		{
			MainNavigationController.goInfo = true;
			DismissViewController(false,null);
		}
		partial void toStats (NSObject sender)
		{
			MainNavigationController.goStats = true;
			DismissViewController(false,null);
		}
		partial void toTrip (NSObject sender)
		{
			MainNavigationController.goTrip = true;
			DismissViewController(false,null);
		}
		partial void toTrophies (NSObject sender)
		{
			MainNavigationController.goTrophies = true;
			DismissViewController(false,null);
		}
		partial void toHome (NSObject sender)
		{

			DismissModalViewControllerAnimated(true);
			StopScreen.fileManager.clearCurrentTripEventFile();
			StopScreen.fileManager.clearCurrentTripDistanceFile();
			StopScreen.fileManager.clearGooglePathFile();
		}


		partial void shareButtonSound (NSObject sender)
		{
			if (MainViewController.isAudioOn) {
				//enable audio
				AudioSession.Initialize ();


				//load the sound
				sound = SystemSound.FromFile ("Sounds/Pop.aiff");

				sound.PlaySystemSound ();
			}

		}
		partial void mapButtonSound (NSObject sender)
		{
			if (MainViewController.isAudioOn) {
				//enable audio
				AudioSession.Initialize ();


				//load the sound
				sound = SystemSound.FromFile ("Sounds/Click.aiff");

				sound.PlaySystemSound ();
			}

		}
		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

		}

		public static Event[] getEvents ()
		{
			return importedGpsEvents;
		}

		public static List<String> getPaths()
		{
			return importedPaths;
		}
	}
}